apiVersion: v2
name: databases
description: A Helm chart for Kubernetes

# A chart can be either an 'application' or a 'library' chart.
#
# Application charts are a collection of templates that can be packaged into versioned archives
# to be deployed.
#
# Library charts provide useful utilities or functions for the chart developer. They're included as
# a dependency of application charts to inject those utilities and functions into the rendering
# pipeline. Library charts do not define any templates and therefore cannot be deployed.
type: application

# This is the chart version. This version number should be incremented each time you make changes
# to the chart and its templates, including the app version.
# Versions are expected to follow Semantic Versioning (https://semver.org/)
version: 0.1.0

# This is the version number of the application being deployed. This version number should be
# incremented each time you make changes to the application. Versions are not expected to
# follow Semantic Versioning. They should reflect the version the application is using.
# It is recommended to use it with quotes.
appVersion: "1.16.0"

dependencies:
  - name: eck-operator
    version: 2.4.0
    repository: https://helm.elastic.co
    condition: enableECKOperator
  - name: mariadb
    version: 11.3.0
    repository: https://charts.bitnami.com/bitnami
    condition: enableMariaDB
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
      ##
      enabled: true
      ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      interval: ""
      ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
      ##
      labels: {}
      ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
      ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
      ##
      selector: {}
      ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
      ##
      relabelings: []
      ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""
      ## Custom PrometheusRule to be defined
      ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
      ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
      ##
      prometheusRule:
        ## @param metrics.prometheusRule.enabled Create a PrometheusRule for Prometheus Operator
        ##
        enabled: true
        ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
        ##
        namespace: ""
        ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
        ##
        labels: {}
        ## @param metrics.prometheusRule.rules PrometheusRule definitions
        ## Make sure to constraint the rules to the current postgresql service.
        ## rules:
        ##   - alert: HugeReplicationLag
        ##     expr: pg_replication_lag{service="{{ printf "%s-metrics" (include "common.names.fullname" .) }}"} / 3600 > 1
        ##     for: 1m
        ##     labels:
        ##       severity: critical
        ##     annotations:
        ##       description: replication for {{ include "common.names.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
        ##       summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).
        ##
        rules: []
  - name: kube-prometheus
    version: 8.1.7
    repository: https://charts.bitnami.com/bitnami
    condition: enablePrometheus
  - name: mongodb
    version: 13.1.3
    repository: https://charts.bitnami.com/bitnami
    condition: enableMongoDB
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
      ##
      enabled: true
      ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      interval: ""
      ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
      ##
      labels: {}
      ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
      ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
      ##
      selector: {}
      ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
      ##
      relabelings: []
      ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""
      ## Custom PrometheusRule to be defined
      ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
      ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
      ##
      prometheusRule:
        ## @param metrics.prometheusRule.enabled Create a PrometheusRule for Prometheus Operator
        ##
        enabled: true
        ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
        ##
        namespace: ""
        ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
        ##
        labels: {}
        ## @param metrics.prometheusRule.rules PrometheusRule definitions
        ## Make sure to constraint the rules to the current postgresql service.
        ## rules:
        ##   - alert: HugeReplicationLag
        ##     expr: pg_replication_lag{service="{{ printf "%s-metrics" (include "common.names.fullname" .) }}"} / 3600 > 1
        ##     for: 1m
        ##     labels:
        ##       severity: critical
        ##     annotations:
        ##       description: replication for {{ include "common.names.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
        ##       summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).
        ##
        rules: []
  - name: postgresql
    version: 11.9.1
    repository: https://charts.bitnami.com/bitnami
    condition: enablePostgreSQL
    metrics:
      ## @param metrics.enabled Start a prometheus exporter
      ##
      enabled: true
      ## @param metrics.image.registry PostgreSQL Prometheus Exporter image registry
      ## @param metrics.image.repository PostgreSQL Prometheus Exporter image repository
      ## @param metrics.image.tag PostgreSQL Prometheus Exporter image tag (immutable tags are recommended)
      ## @param metrics.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
      ## @param metrics.image.pullPolicy PostgreSQL Prometheus Exporter image pull policy
      ## @param metrics.image.pullSecrets Specify image pull secrets
      ##
      image:
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.11.1-debian-11-r8
        digest: ""
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## Example:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## Prometheus Operator ServiceMonitor configuration
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
        ##
        enabled: true
        ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)
        ##
        namespace: ""
        ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        interval: ""
        ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        scrapeTimeout: ""
        ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
        ##
        labels: {}
        ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
        ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
        ##
        selector: {}
        ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
        ##
        relabelings: []
        ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
        ##
        metricRelabelings: []
        ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
        ##
        honorLabels: false
        ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
        ##
        jobLabel: ""
  - name: grafana
    version: 8.2.8
    repository: https://charts.bitnami.com/bitnami
    condition: enableGrafana


